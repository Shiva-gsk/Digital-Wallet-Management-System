// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model Wallet {
  id                   String        @id @default(cuid())
  balance              Float         @default(0)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  isActive             Boolean       @default(true)
  user                 User?
  deposits          Deposit[]
  withdrawals       Withdrawal[]
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  name        String?
  password    Int?
  phoneNum    String?
  is_admin    Role     @default(USER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sentTransactions     Transaction[] @relation("SenderRelation")
  receivedTransactions Transaction[] @relation("ReceiverRelation")
  wallet_id   String?  @unique
  user_wallet Wallet?  @relation(fields: [wallet_id], references: [id])

  sentRequests MoneyRequest[] @relation("SentRequests")
  receivedRequests MoneyRequest[] @relation("ReceivedRequests")
  activityLogs ActivityLog[]
  notifications Notification[]
}

model Transaction {
  id               String   @id @default(cuid())
  receiver_id      String
  sender_id        String
  receiver         User   @relation(fields: [receiver_id], references: [id], name: "ReceiverRelation")
  sender           User   @relation(fields: [sender_id], references: [id], name: "SenderRelation")
  status           String
  amount           Float
  transaction_date DateTime @default(now())
  desc             String?
}

model MoneyRequest {
  id           String   @id @default(cuid())
  status       String
  amount       Float
  request_date DateTime @default(now())
  desc         String?
  sender_id    String
  receiver_id  String
  sender       User     @relation(fields: [sender_id], references: [id], name: "SentRequests")
  receiver     User     @relation(fields: [receiver_id], references: [id], name: "ReceivedRequests")
}

model Deposit {
  id          String   @id @default(cuid())
  walletId    String
  wallet      Wallet   @relation(fields: [walletId], references: [id])
  amount      Float
  request_date DateTime @default(now())
  process_date DateTime? @default(now())
  status      String
}

model Withdrawal {
  id          String   @id @default(cuid())
  walletId    String
  wallet      Wallet   @relation(fields: [walletId], references: [id])
  amount      Float
  request_date DateTime @default(now())
  process_date DateTime?
  status      String
}

model ActivityLog {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  activity_type String
  details     String?
  timestamp   DateTime @default(now())
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  type        String
  message     String
  is_read     Boolean @default(false)
  createdAt   DateTime @default(now())
}